/**
 * Open Api Specification
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { FinancialFormDto } from '../model/models';
import { PersonaFormDto } from '../model/models';
import { QuestionFormDto } from '../model/models';
import { RealEstateDto } from '../model/models';
import { RealEstateOverviewDto } from '../model/models';
import { RequestDto } from '../model/models';
import { RequestOverviewDto } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface DefaultServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create a sub-request under a request
     * Create a sub-request under a request
     * @param requestId 
     * @param requestDto 
     */
    createSubRequest(requestId: string, requestDto: RequestDto, extraHttpRequestParams?: any): Observable<RequestDto>;

    /**
     * Delete a request
     * Delete a request
     * @param requestId 
     */
    deleteRequest(requestId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Retrieve a list of real estate
     * Retrieve a list of real estate
     */
    findRealEstate(extraHttpRequestParams?: any): Observable<Array<RealEstateOverviewDto>>;

    /**
     * Retrieve a single real estate item by its ID
     * Retrieve a single real estate item by its ID
     * @param realEstateId 
     */
    findRealEstateById(realEstateId: string, extraHttpRequestParams?: any): Observable<RealEstateDto>;

    /**
     * Retrieve a request by its ID
     * Retrieve a request by its ID
     * @param requestId 
     */
    findRequestById(requestId: string, extraHttpRequestParams?: any): Observable<RequestDto>;

    /**
     * Retrieve FinancialForm for a specific request
     * Retrieve FinancialForm for a specific request
     * @param requestId 
     */
    getFinancialForm(requestId: string, extraHttpRequestParams?: any): Observable<FinancialFormDto>;

    /**
     * Retrieve persona form for a specific request
     * Retrieve persona form for a specific request
     * @param requestId 
     */
    getPersonaForm(requestId: string, extraHttpRequestParams?: any): Observable<PersonaFormDto>;

    /**
     * Retrieve QuestionForm for a specific request
     * Retrieve QuestionForm for a specific request
     * @param requestId 
     */
    getQuestionForm(requestId: string, extraHttpRequestParams?: any): Observable<QuestionFormDto>;

    /**
     * List all requests
     * List all requests
     */
    listRequests(extraHttpRequestParams?: any): Observable<Array<RequestOverviewDto>>;

    /**
     * Update FinancialForm details
     * Update FinancialForm details
     * @param requestId 
     * @param financialFormDto 
     */
    updateFinancialForm(requestId: string, financialFormDto: FinancialFormDto, extraHttpRequestParams?: any): Observable<FinancialFormDto>;

    /**
     * Update PersonaForm details
     * Update PersonaForm details
     * @param requestId 
     * @param personaFormDto 
     */
    updatePersonaForm(requestId: string, personaFormDto: PersonaFormDto, extraHttpRequestParams?: any): Observable<PersonaFormDto>;

    /**
     * Update QuestionForm details
     * Update QuestionForm details
     * @param requestId 
     * @param questionFormDto 
     */
    updateQuestionForm(requestId: string, questionFormDto: QuestionFormDto, extraHttpRequestParams?: any): Observable<QuestionFormDto>;

    /**
     * Update a request partially
     * Update a request partially
     * @param requestId 
     * @param requestDto 
     */
    updateRequest(requestId: string, requestDto: RequestDto, extraHttpRequestParams?: any): Observable<RequestDto>;

}
